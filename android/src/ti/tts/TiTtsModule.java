/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.tts;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.speech.tts.UtteranceProgressListener;
import android.speech.tts.Voice;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;

import java.util.Locale;


@Kroll.module(name = "TiTts", id = "ti.tts")
public class TiTtsModule extends KrollModule {

    private static final String LCAT = "TiTtsModule";
    TextToSpeech tts;

    public TiTtsModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public String getVoices(@Kroll.argument(optional = true) String value) {
        String out = "";
        String cnc = "";
        for (Voice tmpVoice : tts.getVoices()) {
            if (value != null) {
                if (tmpVoice.getName().contains(value)) {
                    out += cnc + tmpVoice.getName();
                }
            } else {
                out += cnc + tmpVoice.getName();
            }
            cnc="|";
        }
        return out;
    }

    @Kroll.setProperty
    public void setSpeed(float value) {
        tts.setSpeechRate(value);
    }

    @Kroll.setProperty
    public void setPitch(float value) {
        tts.setPitch(value);
    }

    @SuppressLint("NewApi")
    @Kroll.setProperty
    public void setVoice(String value) {
        Voice voice = null;

        for (Voice tmpVoice : tts.getVoices()) {
            if (tmpVoice.getName().equals(value)) {
                voice = tmpVoice;
                break;
            }
        }
        if (voice != null) {
            tts.setVoice(voice);
        }
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void init() {
        tts = new TextToSpeech(TiApplication.getAppCurrentActivity(), status -> {
            KrollDict kd = new KrollDict();
            kd.put("status", status);
            fireEvent("init", kd);
        });
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void speak(String value, @Kroll.argument(optional = true) String uid, @Kroll.argument(optional = true) String mode) {
        if (uid == null) uid="TTS.uniqueID";
        mode=mode.toLowerCase();
        int quem = ((mode != null) && (mode.equals("flush") || mode.equals("f"))) ? TextToSpeech.QUEUE_FLUSH : TextToSpeech.QUEUE_ADD;
        tts.speak(value, quem, null, uid);
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void speak3D(String value, float vol, float pan, @Kroll.argument(optional = true) String uid, @Kroll.argument(optional = true) String mode) {
        Bundle params = new Bundle();
        params.putFloat(TextToSpeech.Engine.KEY_PARAM_VOLUME, vol); // Volume da 0.0 a 1.0
        params.putFloat(TextToSpeech.Engine.KEY_PARAM_PAN, pan); // Pan da -1.0 (sinistra) a 1.0 (destra)
        if (uid == null) uid="TTS.uniqueID";
        mode=mode.toLowerCase();
        int quem = ((mode != null) && (mode.equals("flush") || mode.equals("f"))) ? TextToSpeech.QUEUE_FLUSH : TextToSpeech.QUEUE_ADD;
        tts.speak(value, quem, null, uid);
    }

    @SuppressLint("NewApi")
    @Kroll.setProperty
    public void setLanguage(String value) {
        tts.setLanguage(Locale.forLanguageTag(value));
    }
    
    @SuppressLint("NewApi")
    @Kroll.getProperty
    public int getBufferlen() {
        return TextToSpeech.getMaxSpeechInputLength();
    }
    
    @SuppressLint("NewApi")
    @Kroll.getProperty
    public boolean getSpeaking() {
        return tts.isSpeaking();
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public String synthesizeToFile(String value, @Kroll.argument(optional = true) String uid, @Kroll.argument(optional = true) String fileName) {

        if (uid == null) uid="TTS.uniqueID";
        if (fileName == null) fileName=System.currentTimeMillis() + ".wav";

        Bundle bundleTts = new Bundle();
/**        bundleTts.putString(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, fileName); */
        bundleTts.putString(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, uid);

        try {
            TiBaseFile outfile = TiFileFactory.createTitaniumFile(fileName, true);
            tts.synthesizeToFile(value, bundleTts, outfile.getNativeFile(), uid);
            return outfile.nativePath(); // absolutePath? 
        } catch (Exception e) {
            return null;
        }
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public int emitEvents() {
        return tts.setOnUtteranceProgressListener(new UtteranceProgressListener() {
                @Override
                public void onStart(String utteranceId) {
                    KrollDict kd = new KrollDict();
                    kd.put("id", utteranceId);
                    fireEvent("start", kd);
                }

                @Override
                public void onDone(String utteranceId) {
                    KrollDict kd = new KrollDict();
                    kd.put("id", utteranceId);
                    fireEvent("done", kd);
                }

                @Override
                public void onError(String utteranceId, int code) {
                    KrollDict kd = new KrollDict();
                    kd.put("id", utteranceId);
                    kd.put("code", code);
                    fireEvent("error", kd);
                }

                @Override
                @Deprecated
                public void onError(String utteranceId) {
                    KrollDict kd = new KrollDict();
                    kd.put("id", utteranceId);
                    fireEvent("error", kd);
                }

                @Override
                public void onStop(String utteranceId, boolean interrupted) {
                    KrollDict kd = new KrollDict();
                    kd.put("id", utteranceId);
                    kd.put("interrupted", interrupted);
                    fireEvent("stop", kd);
                }
            });
    }
    
    @SuppressLint("NewApi")
    @Kroll.method
    public void shutdown() {
        tts.shutdown();
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public int stop() {
        return tts.stop();
    }

}
