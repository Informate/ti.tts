/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.tts;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.speech.tts.UtteranceProgressListener;
import android.speech.tts.Voice;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;

import java.util.Locale;


@Kroll.module(name = "TiTts", id = "ti.tts")
public class TiTtsModule extends KrollModule {

    private static final String LCAT = "TiTtsModule";
    TextToSpeech tts;

    public TiTtsModule() {
        super();
    }


    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public String getVoices(@Kroll.argument(optional = true) String value) {
        String out = "";
        for (Voice tmpVoice : tts.getVoices()) {
            if (value != null) {
                if (tmpVoice.getName().contains(value)) {
                    out += tmpVoice.getName() + "|";
                }
            } else {
                out += tmpVoice.getName() + "|";
            }
        }
        return out;
    }

    @Kroll.setProperty
    public void setSpeed(float value) {
        tts.setSpeechRate(value);
    }

    @Kroll.setProperty
    public void setPitch(float value) {
        tts.setPitch(value);
    }

    @SuppressLint("NewApi")
    @Kroll.setProperty
    public void setVoice(String value) {
        Voice voice = null;

        for (Voice tmpVoice : tts.getVoices()) {
            if (tmpVoice.getName().equals(value)) {
                voice = tmpVoice;
                break;
            }
        }
        if (voice != null) {
            tts.setVoice(voice);
        }
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void init() {
        tts = new TextToSpeech(TiApplication.getAppCurrentActivity(), status -> {
            fireEvent("init", new KrollDict());
        });
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void speak(String value) {
        tts.speak(value, TextToSpeech.QUEUE_ADD, null);
    }


    @SuppressLint("NewApi")
    @Kroll.setProperty
    public void setLanguage(String value) {
        tts.setLanguage(Locale.forLanguageTag(value));
    }

    @SuppressLint("NewApi")
    @Kroll.method
    public void synthesizeToFile(String value) {

        Bundle bundleTts = new Bundle();
        String fileName = System.currentTimeMillis() + ".wav";
        bundleTts.putString(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, fileName);

        try {
            TiBaseFile outfile = TiFileFactory.createTitaniumFile(fileName, true);

            tts.setOnUtteranceProgressListener(new UtteranceProgressListener() {
                @Override
                public void onStart(String utteranceId) {

                }

                @Override
                public void onDone(String utteranceId) {
                    KrollDict kd = new KrollDict();
                    kd.put("blob", TiBlob.blobFromFile(outfile));
                    fireEvent("done", kd);
                }

                @Override
                public void onError(String utteranceId) {

                }
            });
            tts.synthesizeToFile(value, bundleTts, outfile.getNativeFile(), "1");
        } catch (Exception e) {

        }
    }

}
